syntax = "proto3";

package ibc.lightclients.beefy.v1;

option go_package = "github.com/cosmos/ibc-go/v3/modules/light-clients/11-beefy/types";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";


// Partial data for MmrLeaf
message MmrLeafPartial {
  // todo: this should be uint8 :(
  uint64 version = 1 ;
  // parent block for this leaf
  uint64 parent_number = 2;
  // parent hash for this leaf
  bytes parent_hash = 3 ;
  // next authority set.
  BeefyAuthoritySet next_authority_set = 4 [(gogoproto.nullable) = false];
}

// Beefy Authority Info
message BeefyAuthoritySet {
  // Id of the authority set, it should be strictly increasing
  uint64 id = 1 ;
  // size  of the authority set
  uint64 len = 2 ;
  // merkle root of all authority public keys.
  bytes authorityMerkleRoot = 3 ;
}

// ClientState from Tendermint tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  // Latest mmr root hash
  bytes mmr_root_hash = 3;
  // block number for the latest mmr_root_hash
  uint64 latestBeefyHeight = 4;
  // authorities for the current round
  BeefyAuthoritySet authority = 5;
}

// data needed to prove finality about ibc commitments in parachain
message ParachainHeaderProof {
  option (gogoproto.goproto_getters) = false;
  // leaf index, latest_beefy_block - beefy_activation_block
  uint64 leaf_index = 1 ;
  // mmr proofs for this index, gotten from rpc "mmr_generateProofs"
  repeated bytes proofs = 2;
  // proofs for our header in the parachain heads root
  repeated bytes heads_proof = 4;
  // reconstructed MmrLeaf, see beefy-go spec
  MmrLeafPartial mmr_leaf_partial = 5;
  }
  
  // data needed to update the client
message ClientUpdateProof {
  option (gogoproto.goproto_getters) = false;
  // new mmr_root_hash
  bytes mmr_root_hash = 1 ;
  // gotten from rpc subscription
  repeated bytes signatures = 2;
  // generated using full authority list from runtime
  repeated bytes authority_proof = 3;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // commitment root (i.e app hash)
  bytes root = 2;
}

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
message Misbehaviour {
  option (gogoproto.goproto_getters) = false;

  string client_id = 1 [(gogoproto.moretags) = "yaml:\"client_id\""];
  Header header_1 = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
  Header header_2 = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
}

// Header contains the neccessary data to proove finality about IBC commitments
message Header {
  ParachainHeader parachain_header = 1 [(gogoproto.embed) = true, (gogoproto.moretags) = "yaml:\"signed_header\""];
  // merkle proof of inclusion in header.extrinsic_root
  repeated bytes extrinsic_proof = 2;
  // actual scale encoded timestamp extrinsic.
  Extrinsic timestamp_extrinsic = 3 [(gogoproto.nullable) = false];
  // Data needed to prove parachain header finality
  ParachainHeaderProof parachain_header_proof = 4 [(gogoproto.nullable) = false];
  // optional payload to update the mmr root hash.
  ClientUpdateProof client_update_proof = 5 [(gogoproto.nullable) = true];
}

// borrowed from https://github.com/centrifuge/go-substrate-rpc-client/blob/7a18f81cc0e531eea6ee0bd96ab49f68aeee0c81/types/extrinsic.go#L46-L53
message Extrinsic {
  // Version is the encoded version flag (which encodes the raw transaction version and signing information in one byte)
  uint32 Version = 1;
  // Signature is the ExtrinsicSignatureV4, it's presence depends on the Version flag
  ExtrinsicSignatureV4 Signature = 2;
  // Method is the call this extrinsic wraps
  Call Method = 3; 
}

message ExtrinsicSignatureV4 {
  MultiAddress Signer = 1;
	MultiSignature Signature = 2;
	ExtrinsicEra Era = 3; // extra via system::CheckEra
	uint64 Nonce = 4; // extra via system::CheckNonce (Compact<Index> where Index is u32))
	uint64 Tip = 5; // extra via balances::TakeFees (Compact<Balance> where Balance is u128))
}

message MultiAddress {
  bool IsID = 1;
	bytes AsID = 2;
	bool IsIndex = 3; 
	uint32 AsIndex = 4;
	bool IsRaw = 5;
	bytes AsRaw = 6;
	bool IsAddress32 = 7;
	bytes AsAddress32 = 8;
	bool IsAddress20 = 9;
	bytes AsAddress20 = 10;
}

message MultiSignature {
	bool IsEd25519 = 1; // 0:: Ed25519(Ed25519Signature)
	bytes AsEd25519 = 2; // Ed25519Signature
	bool IsSr25519 = 3; // 1:: Sr25519(Sr25519Signature)
	bytes AsSr25519 = 4; // Sr25519Signature
	bool IsEcdsa = 5; // 2:: Ecdsa(EcdsaSignature)
	bytes AsEcdsa = 6; // EcdsaSignature
}

// ExtrinsicEra indicates either a mortal or immortal extrinsic
message ExtrinsicEra {
	bool IsImmortalEra = 1;
	// AsImmortalEra ImmortalEra
	bool IsMortalEra = 2;
	MortalEra AsMortalEra= 3; 
}

// MortalEra for an extrinsic, indicating period and phase
message MortalEra {
	uint32 First = 1; 
	uint32 Second =2;
}

// Call is the extrinsic function descriptor
message Call {
	CallIndex CallIndex = 1;
	bytes Args = 2;
}

// Call is the extrinsic function descriptor
message CallIndex {
	uint32 SectionIndex = 1;
	uint32 MethodIndex = 2;
}

// borrowed from: https://github.com/centrifuge/go-substrate-rpc-client/blob/7a18f81cc0e531eea6ee0bd96ab49f68aeee0c81/types/header.go?_pjax=%23js-repo-pjax-container%2C%20div%5Bitemtype%3D%22http%3A%2F%2Fschema.org%2FSoftwareSourceCode%22%5D%20main%2C%20%5Bdata-pjax-container%5D#L28-L34
message ParachainHeader {
  bytes ParentHash = 1;
	uint32 Number = 2;
	bytes StateRoot = 3; 
	bytes ExtrinsicsRoot = 4;
	repeated DigestItem Digest = 5;

}

message DigestItem {
	bool IsChangesTrieRoot = 1;
	bytes AsChangesTrieRoot = 2;
	bool IsPreRuntime = 3;
	PreRuntime AsPreRuntime = 4;
	bool IsConsensus = 5;
	Consensus AsConsensus = 6;
	bool IsSeal = 7;
	Seal AsSeal = 8;
	bool IsChangesTrieSignal = 9;
	ChangesTrieSignal AsChangesTrieSignal = 10;
	bool IsOther = 11;
	bytes AsOther = 12; 
}

message PreRuntime {
	uint32 ConsensusEngineID = 1;
	bytes Bytes = 2;
}

message Consensus {
	uint32 ConsensusEngineID = 1;
	bytes Bytes = 2;
}

message Seal {
	uint32 ConsensusEngineID = 1;
	bytes Bytes = 2;
}

message ChangesTrieSignal {
	bool IsNewConfiguration = 1;
	bytes AsNewConfiguration = 2;
}