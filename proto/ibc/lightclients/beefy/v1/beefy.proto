syntax = "proto3";

package ibc.lightclients.beefy.v1;

option go_package = "github.com/cosmos/ibc-go/v3/modules/light-clients/11-beefy/types";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = false;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;
option (gogoproto.protosizer_all) =false;

// ClientState from Tendermint tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState {
  option (gogoproto.goproto_getters) = false;

  // Latest mmr root hash
  bytes mmr_root_hash = 1;

  // block number for the latest mmr_root_hash
  uint32 latest_beefy_height = 2;

  // block number that the beefy protocol was activated on the relay chain.
  // This shoould be the first block in the merkle-mountain-range tree.
  uint32 beefy_activation_block = 3;

  // authorities for the current round
  BeefyAuthoritySet authority = 4;

  // authorities for the next round
  BeefyAuthoritySet next_authority_set = 5;
}

// Actual payload items
message PayloadItem {
  option (gogoproto.goproto_getters) = false;

  // 2-byte payload id
  bytes payload_id = 1;

  // arbitrary length payload data., eg mmr_root_hash
  bytes payload_data = 2;
}

// Commitment message signed by beefy validators
message Commitment {
  option (gogoproto.goproto_getters) = false;

  // array of payload items signed by Beefy validators
  bytes payload = 1 [(gogoproto.customtype) = "[32]byte"];

  // block number for this commitment
  uint32 block_numer = 2;

  // validator set that signed this commitment
  uint64 validator_set_id = 3;
}

// Signature belonging to a single validator
message CommitmentSignature {
  option (gogoproto.goproto_getters) = false;

  // actual signature bytes
  bytes signature = 1;

  // authority leaf index in the merkle tree.
  uint32 authority_index = 2;
}

// signed commitment data
message SignedCommitment {
  option (gogoproto.goproto_getters) = false;

  // commitment data being signed
  Commitment commitment = 1;

  // gotten from rpc subscription
  repeated CommitmentSignature signatures = 2;
}
// data needed to update the client
message MmrUpdateProof {
  option (gogoproto.goproto_getters) = false;
  // the new mmr leaf SCALE encoded.
  BeefyMmrLeaf mmr_leaf = 1;

  // leaf index for the mmr_leaf
  uint64 mmr_leaf_index = 2;

  // proof that this mmr_leaf index is valid.
  repeated bytes mmr_proof = 3;

  // signed commitment data
  SignedCommitment signed_commitment = 4;

  // generated using full authority list from runtime
  repeated bytes authorities_proof = 5;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  option (gogoproto.goproto_getters) = false;

  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  google.protobuf.Timestamp timestamp = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  // packet commitment root
  bytes root = 2;

  // proof of inclusion for this parachain header in the Mmr.
  ParachainHeader parachain_header = 4 [(gogoproto.nullable) = false];
}

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
message Misbehaviour {
  option (gogoproto.goproto_getters) = false;

  Header header_1 = 2 [(gogoproto.customname) = "Header1", (gogoproto.moretags) = "yaml:\"header_1\""];
  Header header_2 = 3 [(gogoproto.customname) = "Header2", (gogoproto.moretags) = "yaml:\"header_2\""];
}

// Timestamp extrinsic data
message TimestampExtrinsic {
  // index of timestamp extrinsic in merkle tree
  uint32 extrinsic_index = 1;

  // merkle proof of inclusion in header.extrinsic_root
  repeated bytes extrinsic_proof = 2;

  // actual scale encoded timestamp extrinsic.
  bytes extrinsic = 3;
}

// Header contains the neccessary data to proove finality about IBC commitments
message Header {
  option (gogoproto.goproto_getters) = false;

  // parachain headers needed for proofs and ConsensusState
  repeated ParachainHeader parachain_headers = 1;

  // mmr proofs for the headers gotten from rpc "mmr_generateProofs"
  repeated bytes mmr_proofs = 2;

  // size of the mmr for the given proof
  uint64 mmr_size = 3;

  // optional payload to update the mmr root hash.
  MmrUpdateProof mmr_update_proof = 4 [(gogoproto.nullable) = true];
}

// data needed to prove parachain header inclusion in mmr.
message ParachainHeader {
  option (gogoproto.goproto_getters) = false;

  // scale-encoded parachain header bytes
  bytes parachain_header = 1;

  // reconstructed MmrLeaf, see beefy-go spec
  BeefyMmrLeafPartial mmr_leaf_partial = 2;

  // para_id of the header.
  uint32 para_id = 3;

  // proofs for our header in the parachain heads root
  repeated bytes parachain_heads_proof = 4;

  // leaf index for parachain heads proof
  uint32 heads_leaf_index = 5;

  // total number of para heads in parachain_heads_root
  uint32 heads_total_count = 6;

  // data needed to provide timestamp for ConsensusState
  TimestampExtrinsic timestamp = 7;
}

// Partial data for MmrLeaf
message BeefyMmrLeafPartial {
  option (gogoproto.goproto_getters) = false;

  // leaf version
  uint32 version = 1 [(gogoproto.customtype) = "uint8", (gogoproto.nullable) = false];

  // parent block for this leaf
  uint32 parent_number = 2;

  // parent hash for this leaf
  bytes parent_hash = 3 [(gogoproto.customtype) = "[32]byte"];

  // next authority set.
  BeefyAuthoritySet beefy_next_authority_set = 4 [(gogoproto.nullable) = false];
}

// Beefy Authority Info
message BeefyAuthoritySet {
  option (gogoproto.goproto_getters) = false;

  // Id of the authority set, it should be strictly increasing
  uint64 id = 1 ;

  // size of the authority set
  uint32 len = 2 ;

  // merkle root of the sorted authority public keys.
  bytes authority_root = 3 [(gogoproto.customtype) = "[32]byte"];
}

message BeefyMmrLeaf {
  option (gogoproto.goproto_getters) = false;

  // leaf version
  uint32 version = 1 [(gogoproto.customtype) = "uint8", (gogoproto.nullable) = false];

  // parent block for this leaf
  uint32 parent_number = 2;

  // parent hash for this leaf
  bytes parent_hash = 3 [(gogoproto.customtype) = "[32]byte"];

  // beefy next authority set.
  BeefyAuthoritySet beefy_next_authority_set = 4 [(gogoproto.nullable) = false];

  // merkle root hash of parachain heads included in the leaf.
  bytes parachain_heads = 5 [(gogoproto.customtype) = "[32]byte"];

}
