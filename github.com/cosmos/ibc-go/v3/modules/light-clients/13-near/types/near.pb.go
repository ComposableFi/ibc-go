// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/near/v1/near.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ClientState from Near tracks its head, {current, next} x {epoch, validators}
type ClientState struct {
	// LightClientBlockView contains most of the state needed to validate
	// a future state transition
	Head *LightClientBlockView `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	// CyrptoHash representing the current epoch
	CurrentEpoch []byte `protobuf:"bytes,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	// CyrptoHash representing the next epoch
	NextEpoch []byte `protobuf:"bytes,3,opt,name=next_epoch,json=nextEpoch,proto3" json:"next_epoch,omitempty"`
	// Tracks the set of validators that will vote on blocks in the current epoch
	CurrentValidators []*ValidatorStakeView `protobuf:"bytes,4,rep,name=current_validators,json=currentValidators,proto3" json:"current_validators,omitempty"`
	// Tracks the set of validators that will vote on blocks in the next epoch
	NextValidators []*ValidatorStakeView `protobuf:"bytes,5,rep,name=next_validators,json=nextValidators,proto3" json:"next_validators,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{0}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientState.Unmarshal(m, b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return xxx_messageInfo_ClientState.Size(m)
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

// LightClientBlockView contains most of the state needed to validate
// a future state transition
type LightClientBlockView struct {
	PrevBlockHash      []byte                    `protobuf:"bytes,1,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	NextBlockInnerHash []byte                    `protobuf:"bytes,2,opt,name=next_block_inner_hash,json=nextBlockInnerHash,proto3" json:"next_block_inner_hash,omitempty"`
	InnerLite          *BlockHeaderInnerLiteView `protobuf:"bytes,3,opt,name=inner_lite,json=innerLite,proto3" json:"inner_lite,omitempty"`
	InnerRestHash      []byte                    `protobuf:"bytes,4,opt,name=inner_rest_hash,json=innerRestHash,proto3" json:"inner_rest_hash,omitempty"`
	// Types that are valid to be assigned to XNextBps:
	//	*LightClientBlockView_NextBps
	XNextBps           isLightClientBlockView_XNextBps `protobuf_oneof:"_next_bps"`
	ApprovalsAfterNext []*MaybeSignature               `protobuf:"bytes,6,rep,name=approvals_after_next,json=approvalsAfterNext,proto3" json:"approvals_after_next,omitempty"`
}

func (m *LightClientBlockView) Reset()         { *m = LightClientBlockView{} }
func (m *LightClientBlockView) String() string { return proto.CompactTextString(m) }
func (*LightClientBlockView) ProtoMessage()    {}
func (*LightClientBlockView) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{1}
}
func (m *LightClientBlockView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightClientBlockView.Unmarshal(m, b)
}
func (m *LightClientBlockView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightClientBlockView.Marshal(b, m, deterministic)
}
func (m *LightClientBlockView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightClientBlockView.Merge(m, src)
}
func (m *LightClientBlockView) XXX_Size() int {
	return xxx_messageInfo_LightClientBlockView.Size(m)
}
func (m *LightClientBlockView) XXX_DiscardUnknown() {
	xxx_messageInfo_LightClientBlockView.DiscardUnknown(m)
}

var xxx_messageInfo_LightClientBlockView proto.InternalMessageInfo

type isLightClientBlockView_XNextBps interface {
	isLightClientBlockView_XNextBps()
}

type LightClientBlockView_NextBps struct {
	NextBps *ValidatorStakeView `protobuf:"bytes,5,opt,name=next_bps,json=nextBps,proto3,oneof" json:"next_bps,omitempty"`
}

func (*LightClientBlockView_NextBps) isLightClientBlockView_XNextBps() {}

func (m *LightClientBlockView) GetXNextBps() isLightClientBlockView_XNextBps {
	if m != nil {
		return m.XNextBps
	}
	return nil
}

func (m *LightClientBlockView) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *LightClientBlockView) GetNextBlockInnerHash() []byte {
	if m != nil {
		return m.NextBlockInnerHash
	}
	return nil
}

func (m *LightClientBlockView) GetInnerLite() *BlockHeaderInnerLiteView {
	if m != nil {
		return m.InnerLite
	}
	return nil
}

func (m *LightClientBlockView) GetInnerRestHash() []byte {
	if m != nil {
		return m.InnerRestHash
	}
	return nil
}

func (m *LightClientBlockView) GetNextBps() *ValidatorStakeView {
	if x, ok := m.GetXNextBps().(*LightClientBlockView_NextBps); ok {
		return x.NextBps
	}
	return nil
}

func (m *LightClientBlockView) GetApprovalsAfterNext() []*MaybeSignature {
	if m != nil {
		return m.ApprovalsAfterNext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LightClientBlockView) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LightClientBlockView_NextBps)(nil),
	}
}

// BlockHeaderInnerLiteView for the current head (which contains height, epoch_id,
// next_epoch_id, prev_state_root, outcome_root, timestamp, the hash of the block
// producers set for the next epoch next_bp_hash, and the merkle root of all
// the block hashes block_merkle_root);
type BlockHeaderInnerLiteView struct {
	BlockHeight      uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	EpochId          []byte `protobuf:"bytes,2,opt,name=epoch_id,json=epochId,proto3" json:"epoch_id,omitempty"`
	NextEpochId      []byte `protobuf:"bytes,3,opt,name=next_epoch_id,json=nextEpochId,proto3" json:"next_epoch_id,omitempty"`
	PrevStateRoot    []byte `protobuf:"bytes,4,opt,name=prev_state_root,json=prevStateRoot,proto3" json:"prev_state_root,omitempty"`
	OutcomeRoot      []byte `protobuf:"bytes,5,opt,name=outcome_root,json=outcomeRoot,proto3" json:"outcome_root,omitempty"`
	Timestamp        uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimestampNanosec uint64 `protobuf:"varint,7,opt,name=timestamp_nanosec,json=timestampNanosec,proto3" json:"timestamp_nanosec,omitempty"`
	NextBpHash       []byte `protobuf:"bytes,8,opt,name=next_bp_hash,json=nextBpHash,proto3" json:"next_bp_hash,omitempty"`
	BlockMerkleRoot  []byte `protobuf:"bytes,9,opt,name=block_merkle_root,json=blockMerkleRoot,proto3" json:"block_merkle_root,omitempty"`
}

func (m *BlockHeaderInnerLiteView) Reset()         { *m = BlockHeaderInnerLiteView{} }
func (m *BlockHeaderInnerLiteView) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderInnerLiteView) ProtoMessage()    {}
func (*BlockHeaderInnerLiteView) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{2}
}
func (m *BlockHeaderInnerLiteView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeaderInnerLiteView.Unmarshal(m, b)
}
func (m *BlockHeaderInnerLiteView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeaderInnerLiteView.Marshal(b, m, deterministic)
}
func (m *BlockHeaderInnerLiteView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderInnerLiteView.Merge(m, src)
}
func (m *BlockHeaderInnerLiteView) XXX_Size() int {
	return xxx_messageInfo_BlockHeaderInnerLiteView.Size(m)
}
func (m *BlockHeaderInnerLiteView) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderInnerLiteView.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderInnerLiteView proto.InternalMessageInfo

func (m *BlockHeaderInnerLiteView) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockHeaderInnerLiteView) GetEpochId() []byte {
	if m != nil {
		return m.EpochId
	}
	return nil
}

func (m *BlockHeaderInnerLiteView) GetNextEpochId() []byte {
	if m != nil {
		return m.NextEpochId
	}
	return nil
}

func (m *BlockHeaderInnerLiteView) GetPrevStateRoot() []byte {
	if m != nil {
		return m.PrevStateRoot
	}
	return nil
}

func (m *BlockHeaderInnerLiteView) GetOutcomeRoot() []byte {
	if m != nil {
		return m.OutcomeRoot
	}
	return nil
}

func (m *BlockHeaderInnerLiteView) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockHeaderInnerLiteView) GetTimestampNanosec() uint64 {
	if m != nil {
		return m.TimestampNanosec
	}
	return 0
}

func (m *BlockHeaderInnerLiteView) GetNextBpHash() []byte {
	if m != nil {
		return m.NextBpHash
	}
	return nil
}

func (m *BlockHeaderInnerLiteView) GetBlockMerkleRoot() []byte {
	if m != nil {
		return m.BlockMerkleRoot
	}
	return nil
}

// Wrapper type over a signature to be able to presenent Option<Signature> inside a Vector
type MaybeSignature struct {
	// Types that are valid to be assigned to XSignature:
	//	*MaybeSignature_Signature
	XSignature isMaybeSignature_XSignature `protobuf_oneof:"_Signature"`
}

func (m *MaybeSignature) Reset()         { *m = MaybeSignature{} }
func (m *MaybeSignature) String() string { return proto.CompactTextString(m) }
func (*MaybeSignature) ProtoMessage()    {}
func (*MaybeSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{3}
}
func (m *MaybeSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaybeSignature.Unmarshal(m, b)
}
func (m *MaybeSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaybeSignature.Marshal(b, m, deterministic)
}
func (m *MaybeSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaybeSignature.Merge(m, src)
}
func (m *MaybeSignature) XXX_Size() int {
	return xxx_messageInfo_MaybeSignature.Size(m)
}
func (m *MaybeSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MaybeSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MaybeSignature proto.InternalMessageInfo

type isMaybeSignature_XSignature interface {
	isMaybeSignature_XSignature()
}

type MaybeSignature_Signature struct {
	Signature []byte `protobuf:"bytes,1,opt,name=Signature,proto3,oneof" json:"Signature,omitempty"`
}

func (*MaybeSignature_Signature) isMaybeSignature_XSignature() {}

func (m *MaybeSignature) GetXSignature() isMaybeSignature_XSignature {
	if m != nil {
		return m.XSignature
	}
	return nil
}

func (m *MaybeSignature) GetSignature() []byte {
	if x, ok := m.GetXSignature().(*MaybeSignature_Signature); ok {
		return x.Signature
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MaybeSignature) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MaybeSignature_Signature)(nil),
	}
}

// Represents a validator stake state that helps verifying whether a vote is valid or not
// and if consensus is reached.
type ValidatorStakeView struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// NOTE: balance is a u128
	Balance []byte `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *ValidatorStakeView) Reset()         { *m = ValidatorStakeView{} }
func (m *ValidatorStakeView) String() string { return proto.CompactTextString(m) }
func (*ValidatorStakeView) ProtoMessage()    {}
func (*ValidatorStakeView) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{4}
}
func (m *ValidatorStakeView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorStakeView.Unmarshal(m, b)
}
func (m *ValidatorStakeView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorStakeView.Marshal(b, m, deterministic)
}
func (m *ValidatorStakeView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStakeView.Merge(m, src)
}
func (m *ValidatorStakeView) XXX_Size() int {
	return xxx_messageInfo_ValidatorStakeView.Size(m)
}
func (m *ValidatorStakeView) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStakeView.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStakeView proto.InternalMessageInfo

func (m *ValidatorStakeView) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ValidatorStakeView) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *ValidatorStakeView) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ValidatorStakeView) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

// ConsensusState defines the consensus state from Tendermint.
type ConsensusState struct {
	// timestamp that corresponds to the block height in which the ConsensusState
	// was stored.
	Timestamp time.Time `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// packet commitment root
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{5}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusState.Unmarshal(m, b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return xxx_messageInfo_ConsensusState.Size(m)
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

// Misbehaviour is a wrapper over two conflicting Headers
// that implements Misbehaviour interface expected by ICS-02
type Misbehaviour struct {
	Header1 *Header `protobuf:"bytes,2,opt,name=header_1,json=header1,proto3" json:"header_1,omitempty" yaml:"header_1"`
	Header2 *Header `protobuf:"bytes,3,opt,name=header_2,json=header2,proto3" json:"header_2,omitempty" yaml:"header_2"`
}

func (m *Misbehaviour) Reset()         { *m = Misbehaviour{} }
func (m *Misbehaviour) String() string { return proto.CompactTextString(m) }
func (*Misbehaviour) ProtoMessage()    {}
func (*Misbehaviour) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{6}
}
func (m *Misbehaviour) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Misbehaviour.Unmarshal(m, b)
}
func (m *Misbehaviour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Misbehaviour.Marshal(b, m, deterministic)
}
func (m *Misbehaviour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Misbehaviour.Merge(m, src)
}
func (m *Misbehaviour) XXX_Size() int {
	return xxx_messageInfo_Misbehaviour.Size(m)
}
func (m *Misbehaviour) XXX_DiscardUnknown() {
	xxx_messageInfo_Misbehaviour.DiscardUnknown(m)
}

var xxx_messageInfo_Misbehaviour proto.InternalMessageInfo

// Header contains the neccessary data to proove finality about IBC commitments
type Header struct {
	Inner *LightClientBlockView `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8759964672ef13d, []int{7}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClientState)(nil), "ibc.lightclients.near.v1.ClientState")
	golang_proto.RegisterType((*ClientState)(nil), "ibc.lightclients.near.v1.ClientState")
	proto.RegisterType((*LightClientBlockView)(nil), "ibc.lightclients.near.v1.LightClientBlockView")
	golang_proto.RegisterType((*LightClientBlockView)(nil), "ibc.lightclients.near.v1.LightClientBlockView")
	proto.RegisterType((*BlockHeaderInnerLiteView)(nil), "ibc.lightclients.near.v1.BlockHeaderInnerLiteView")
	golang_proto.RegisterType((*BlockHeaderInnerLiteView)(nil), "ibc.lightclients.near.v1.BlockHeaderInnerLiteView")
	proto.RegisterType((*MaybeSignature)(nil), "ibc.lightclients.near.v1.MaybeSignature")
	golang_proto.RegisterType((*MaybeSignature)(nil), "ibc.lightclients.near.v1.MaybeSignature")
	proto.RegisterType((*ValidatorStakeView)(nil), "ibc.lightclients.near.v1.ValidatorStakeView")
	golang_proto.RegisterType((*ValidatorStakeView)(nil), "ibc.lightclients.near.v1.ValidatorStakeView")
	proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.near.v1.ConsensusState")
	golang_proto.RegisterType((*ConsensusState)(nil), "ibc.lightclients.near.v1.ConsensusState")
	proto.RegisterType((*Misbehaviour)(nil), "ibc.lightclients.near.v1.Misbehaviour")
	golang_proto.RegisterType((*Misbehaviour)(nil), "ibc.lightclients.near.v1.Misbehaviour")
	proto.RegisterType((*Header)(nil), "ibc.lightclients.near.v1.Header")
	golang_proto.RegisterType((*Header)(nil), "ibc.lightclients.near.v1.Header")
}

func init() {
	proto.RegisterFile("ibc/lightclients/near/v1/near.proto", fileDescriptor_c8759964672ef13d)
}
func init() {
	golang_proto.RegisterFile("ibc/lightclients/near/v1/near.proto", fileDescriptor_c8759964672ef13d)
}

var fileDescriptor_c8759964672ef13d = []byte{
	// 914 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x25, 0x6d, 0xd9, 0x92, 0x46, 0xb2, 0x5d, 0x2f, 0x5c, 0x40, 0x35, 0x5a, 0x49, 0x51, 0x80,
	0xc2, 0x68, 0x6b, 0x12, 0x92, 0x6f, 0xb9, 0x14, 0x51, 0x5a, 0xc0, 0x46, 0xed, 0x00, 0xa5, 0xd3,
	0x1c, 0x92, 0x03, 0xb1, 0xa4, 0x36, 0xe2, 0xc2, 0x14, 0x97, 0xe0, 0x2e, 0xd5, 0xea, 0x07, 0x0a,
	0x1f, 0xf3, 0x09, 0x01, 0xfa, 0x23, 0x3d, 0xe6, 0xd4, 0xe6, 0xd8, 0x93, 0x1b, 0x58, 0x7f, 0xd0,
	0x2f, 0x28, 0x76, 0x96, 0xa4, 0x55, 0xa4, 0x3a, 0xc4, 0x27, 0xee, 0xbe, 0x79, 0xfb, 0x66, 0x38,
	0x33, 0x3b, 0x0b, 0x0f, 0x79, 0x10, 0xba, 0x31, 0x9f, 0x46, 0x2a, 0x8c, 0x39, 0x4b, 0x94, 0x74,
	0x13, 0x46, 0x33, 0x77, 0x3e, 0xc4, 0xaf, 0x93, 0x66, 0x42, 0x09, 0xd2, 0xe1, 0x41, 0xe8, 0xac,
	0x92, 0x1c, 0x34, 0xce, 0x87, 0x87, 0xbd, 0xa9, 0x10, 0xd3, 0x98, 0xb9, 0xc8, 0x0b, 0xf2, 0x57,
	0xae, 0xe2, 0x33, 0x26, 0x15, 0x9d, 0xa5, 0xe6, 0xe8, 0xe1, 0xc1, 0x54, 0x4c, 0x05, 0x2e, 0x5d,
	0xbd, 0x32, 0xe8, 0xe0, 0xcf, 0x0d, 0x68, 0x3d, 0x41, 0xa9, 0x4b, 0x45, 0x15, 0x23, 0x63, 0xa8,
	0x45, 0x8c, 0x4e, 0x3a, 0x76, 0xdf, 0x3e, 0x6a, 0x8d, 0x1c, 0x67, 0x9d, 0x3f, 0xe7, 0x5c, 0x83,
	0xe6, 0xe4, 0x38, 0x16, 0xe1, 0xd5, 0x73, 0xce, 0x7e, 0xf6, 0xf0, 0x2c, 0x79, 0x08, 0x3b, 0x61,
	0x9e, 0x65, 0x2c, 0x51, 0x3e, 0x4b, 0x45, 0x18, 0x75, 0x36, 0xfa, 0xf6, 0x51, 0xdb, 0x6b, 0x17,
	0xe0, 0xf7, 0x1a, 0x23, 0x5f, 0x00, 0x24, 0xec, 0x97, 0x92, 0xb1, 0x89, 0x8c, 0xa6, 0x46, 0x8c,
	0xf9, 0x25, 0x90, 0x52, 0x63, 0x4e, 0x63, 0x3e, 0xa1, 0x4a, 0x64, 0xb2, 0x53, 0xeb, 0x6f, 0x1e,
	0xb5, 0x46, 0xdf, 0xac, 0x8f, 0xea, 0x79, 0xc9, 0xbd, 0x54, 0xf4, 0x8a, 0x61, 0x4c, 0xfb, 0x85,
	0x4e, 0x65, 0x92, 0xe4, 0x27, 0xd8, 0x43, 0xdf, 0x2b, 0xca, 0x5b, 0xf7, 0x50, 0xde, 0xd5, 0x22,
	0x77, 0xb2, 0x8f, 0x6a, 0xd7, 0x6f, 0x7a, 0xd6, 0xe0, 0xb7, 0x4d, 0x38, 0xf8, 0xbf, 0xe4, 0x90,
	0x2f, 0x61, 0x2f, 0xcd, 0xd8, 0xdc, 0x0f, 0x34, 0xe2, 0x47, 0x54, 0x46, 0x98, 0xe5, 0xb6, 0xb7,
	0xa3, 0x61, 0xe4, 0x9d, 0x52, 0x19, 0x91, 0x21, 0x7c, 0x8a, 0xd1, 0x19, 0x1e, 0x4f, 0x12, 0x96,
	0x19, 0xb6, 0x49, 0x23, 0xd1, 0x46, 0x64, 0x9f, 0x69, 0x13, 0x1e, 0xf9, 0x11, 0xc0, 0xf0, 0x62,
	0xae, 0x18, 0x26, 0xb3, 0x35, 0x1a, 0xad, 0xff, 0x17, 0xe3, 0x8b, 0xd1, 0x09, 0xcb, 0x50, 0xe3,
	0x9c, 0x2b, 0xf3, 0x47, 0x4d, 0x5e, 0x6e, 0x75, 0xb4, 0x46, 0x32, 0x63, 0x52, 0x19, 0xff, 0x35,
	0x13, 0x2d, 0xc2, 0x1e, 0x93, 0x0a, 0x5d, 0x9f, 0x43, 0xc3, 0x44, 0x9b, 0xea, 0x24, 0xda, 0x1f,
	0x9b, 0xc4, 0x53, 0xcb, 0xab, 0xe3, 0x0f, 0xa5, 0xf2, 0xda, 0xb6, 0xc9, 0x0b, 0x38, 0xa0, 0x69,
	0x9a, 0x89, 0x39, 0x8d, 0xa5, 0x4f, 0x5f, 0x29, 0x96, 0xf9, 0xda, 0xda, 0xd9, 0xc6, 0xf2, 0x1c,
	0xad, 0x57, 0xbe, 0xa0, 0x8b, 0x80, 0x5d, 0xf2, 0x69, 0x42, 0x55, 0x9e, 0x31, 0x8f, 0x54, 0x2a,
	0x8f, 0xb5, 0xc8, 0x53, 0xed, 0xa1, 0x05, 0x4d, 0xbf, 0x0c, 0x75, 0xf0, 0x7e, 0x03, 0x3a, 0xeb,
	0xd2, 0x40, 0x1e, 0x40, 0xbb, 0x28, 0x12, 0xd3, 0xbe, 0xb0, 0x4c, 0x35, 0xaf, 0x15, 0x18, 0xbe,
	0x86, 0xc8, 0x67, 0xd0, 0xc0, 0xce, 0xf5, 0xf9, 0xa4, 0xa8, 0x4b, 0x1d, 0xf7, 0x67, 0x13, 0x32,
	0x80, 0x9d, 0xbb, 0xce, 0xd6, 0x76, 0xd3, 0xdc, 0xad, 0xaa, 0xb9, 0xcf, 0x26, 0x55, 0x2f, 0x48,
	0x7d, 0xe9, 0xfc, 0x4c, 0x08, 0x55, 0x66, 0x57, 0xc3, 0x78, 0x15, 0x3d, 0x21, 0x94, 0x8e, 0x44,
	0xe4, 0x2a, 0x14, 0xb3, 0x82, 0xb4, 0x65, 0xa4, 0x0a, 0x0c, 0x29, 0x9f, 0x43, 0xb3, 0xba, 0xea,
	0x9d, 0x6d, 0x8c, 0xf4, 0x0e, 0x20, 0x5f, 0xc3, 0x7e, 0xb5, 0xf1, 0x13, 0x9a, 0x08, 0xc9, 0xc2,
	0x4e, 0x1d, 0x59, 0x9f, 0x54, 0x86, 0xa7, 0x06, 0x27, 0x7d, 0x68, 0x17, 0x09, 0x32, 0x05, 0x6f,
	0xa0, 0x37, 0x30, 0xf5, 0xc1, 0x6a, 0x7f, 0x05, 0xfb, 0x26, 0x33, 0x33, 0x96, 0x5d, 0xc5, 0x45,
	0x50, 0x4d, 0xa4, 0xed, 0xa1, 0xe1, 0x02, 0x71, 0x1d, 0xd8, 0xe0, 0x31, 0xec, 0xfe, 0xb7, 0x2a,
	0xe4, 0x01, 0x34, 0xab, 0x8d, 0xe9, 0xfd, 0x53, 0xcb, 0xbb, 0x83, 0xae, 0x6d, 0x7b, 0xdc, 0x06,
	0xf0, 0x2b, 0x60, 0xf0, 0xab, 0x0d, 0xe4, 0xc3, 0x9e, 0x21, 0x1d, 0xa8, 0xcf, 0x59, 0x26, 0xb9,
	0x48, 0x50, 0x65, 0xc7, 0x2b, 0xb7, 0x7a, 0xaa, 0xd0, 0x30, 0x14, 0x79, 0xa2, 0xca, 0xc2, 0x34,
	0xbd, 0x66, 0x81, 0x9c, 0x4d, 0xb4, 0x39, 0xcd, 0x83, 0x98, 0x87, 0xfe, 0x15, 0x5b, 0x94, 0x43,
	0xc7, 0x20, 0x3f, 0xb0, 0x85, 0xd6, 0x0d, 0x68, 0x4c, 0x93, 0x90, 0x15, 0xd5, 0x28, 0xb7, 0x83,
	0x04, 0x76, 0x9f, 0x88, 0x44, 0xb2, 0x44, 0xe6, 0xb2, 0x1c, 0x94, 0x2b, 0x69, 0x37, 0xd3, 0xf2,
	0xd0, 0x31, 0x33, 0xd8, 0x29, 0x67, 0xb0, 0xf3, 0xac, 0x64, 0x8c, 0x1b, 0x6f, 0x6f, 0x7a, 0xd6,
	0xeb, 0xbf, 0x7b, 0xf6, 0x6a, 0x71, 0x08, 0xd4, 0x30, 0x81, 0xa6, 0x81, 0x70, 0x5d, 0x0c, 0x91,
	0x3f, 0x6c, 0x68, 0x5f, 0x70, 0x19, 0xb0, 0x88, 0xce, 0xb9, 0xc8, 0x33, 0xf2, 0x12, 0x1a, 0x11,
	0x76, 0xaa, 0x3f, 0x44, 0x7a, 0x6b, 0xd4, 0x5f, 0x7f, 0x19, 0x4c, 0x4f, 0x8f, 0xbb, 0xb7, 0x37,
	0xbd, 0xba, 0x59, 0x0f, 0xff, 0xb9, 0xe9, 0xed, 0x2d, 0xe8, 0x2c, 0x7e, 0x34, 0x28, 0x65, 0x06,
	0x5e, 0xdd, 0x2c, 0x87, 0x2b, 0xe2, 0xa3, 0x62, 0x78, 0x7c, 0x94, 0xf8, 0xe8, 0x03, 0xf1, 0x51,
	0x25, 0x3e, 0x2a, 0x7e, 0xe8, 0x19, 0x6c, 0x1b, 0x32, 0xf9, 0x0e, 0xb6, 0x70, 0x82, 0xdc, 0xf3,
	0x89, 0x31, 0x87, 0x8d, 0xea, 0x98, 0xbe, 0xbd, 0xed, 0x5a, 0xef, 0x6e, 0xbb, 0xd6, 0xfb, 0xdb,
	0xae, 0xf5, 0x7a, 0xd9, 0xb5, 0xde, 0x2c, 0xbb, 0xd6, 0xef, 0xcb, 0xae, 0xfd, 0x6e, 0xd9, 0xb5,
	0xfe, 0x5a, 0x76, 0xad, 0x17, 0xdf, 0x4e, 0xb9, 0x8a, 0xf2, 0xc0, 0x09, 0xc5, 0xcc, 0x0d, 0x85,
	0x9c, 0x09, 0xe9, 0xf2, 0x20, 0x3c, 0x9e, 0x0a, 0x77, 0x7e, 0xe2, 0xce, 0xc4, 0x24, 0x8f, 0x99,
	0x34, 0xaf, 0xee, 0x71, 0xf9, 0xec, 0x0e, 0x4f, 0x8e, 0xf1, 0xe5, 0x55, 0x8b, 0x94, 0xc9, 0x60,
	0x1b, 0x8b, 0x79, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0xf5, 0xb2, 0xe7, 0x9f, 0x07,
	0x00, 0x00,
}
